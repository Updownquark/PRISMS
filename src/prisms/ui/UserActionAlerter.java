/**
 * UserActionAlerter.java Created Feb 19, 2009 by Andrew Butler, PSL
 */
package prisms.ui;

import org.dom4j.Element;

/**
 * Listens to the "getUserActions" event generated by some tree and list nodes, adds a configured
 * menu item (action), and fires a configured event when the action is selected
 */
public class UserActionAlerter implements prisms.arch.event.SessionMonitor
{
	prisms.arch.PrismsSession theSession;

	private String [] thePlugins;

	String theActionName;

	private String theEventName;

	private String [] theEventPropertiesIn;

	private String [] theEventPropertiesOut;

	private Class<? extends Object> [] theEventPropertyClasses;

	private boolean [] theEventPropertyRequired;

	/**
	 * @see prisms.arch.event.SessionMonitor#register(prisms.arch.PrismsSession, org.dom4j.Element)
	 */
	public void register(prisms.arch.PrismsSession session, Element configEl)
	{
		theSession = session;
		Element pluginsEl = configEl.element("activatePlugins");
		if(pluginsEl == null)
			throw new IllegalArgumentException("No plugins configured: " + configEl.asXML());
		java.util.List<Element> els = pluginsEl.elements("plugin");
		if(els.size() == 0)
			throw new IllegalArgumentException("No plugins configured: " + configEl.asXML());
		thePlugins = new String [els.size()];
		for(int p = 0; p < thePlugins.length; p++)
		{
			thePlugins[p] = els.get(p).getTextTrim();
			if(thePlugins[p] == null || thePlugins[p].length() == 0)
				throw new IllegalArgumentException("Plugin element is empty: " + configEl.asXML());
		}
		theActionName = configEl.elementTextTrim("actionname");
		if(theActionName == null)
			throw new IllegalArgumentException("No actionname configured: " + configEl.asXML());
		theEventName = configEl.elementTextTrim("eventname");
		if(theEventName == null)
			throw new IllegalArgumentException("No eventname configured: " + configEl.asXML());
		Element propertiesEl = configEl.element("properties");
		if(propertiesEl != null)
		{
			els = propertiesEl.elements("property");
			theEventPropertiesIn = new String [els.size()];
			theEventPropertiesOut = new String [els.size()];
			theEventPropertyClasses = new Class [els.size()];
			theEventPropertyRequired = new boolean [els.size()];
			for(int p = 0; p < theEventPropertiesIn.length; p++)
			{
				theEventPropertiesIn[p] = els.get(p).elementTextTrim("name");
				theEventPropertiesOut[p] = els.get(p).elementTextTrim("newname");
				if(theEventPropertiesIn[p] == null || theEventPropertiesIn[p].length() == 0)
					throw new IllegalArgumentException("event property not properly configured: "
						+ configEl.asXML());
				String clazz = els.get(p).elementTextTrim("class");
				if(clazz != null)
				{
					try
					{
						theEventPropertyClasses[p] = Class.forName(clazz);
					} catch(ClassNotFoundException e)
					{
						throw new IllegalArgumentException("Class " + clazz
							+ " not found for property " + theEventPropertiesIn[p] + ": "
							+ configEl.asXML(), e);
					} catch(NoClassDefFoundError e)
					{
						throw new IllegalArgumentException("Class " + clazz
							+ " not found for property " + theEventPropertiesIn[p] + ": "
							+ configEl.asXML(), e);
					}
				}
				theEventPropertyRequired[p] = !"false".equalsIgnoreCase(els.get(p).elementTextTrim(
					"required"));
			}
		}
		else
		{
			theEventPropertiesIn = new String [0];
			theEventPropertyClasses = new Class [0];
			theEventPropertyRequired = new boolean [0];
		}
		session.addEventListener("getUserActions", new prisms.arch.event.PrismsEventListener()
		{
			public void eventOccurred(prisms.arch.event.PrismsEvent evt)
			{
				final prisms.arch.event.PrismsEvent toFire = getEventToFire(evt);
				if(toFire == null)
					return;
				evt.setProperty("actions", prisms.util.ArrayUtils.add((javax.swing.Action[]) evt
					.getProperty("actions"), new javax.swing.AbstractAction(theActionName)
				{
					public void actionPerformed(java.awt.event.ActionEvent actionEvent)
					{
						UserActionAlerter.this.actionPerformed(toFire, actionEvent);
					}
				}));
			}
		});
	}

	/**
	 * @return This alerter's session
	 */
	public prisms.arch.PrismsSession getSession()
	{
		return theSession;
	}

	/**
	 * This method takes a "getUserActions" event and returns an event to fire in the case that the
	 * user clicks on the action generated. If the method returns null, no action will be displayed.
	 * 
	 * @param evt The getUserActions event to get an action for
	 * @return The PrismsEvent that should be fired if the user chooses the action generated by this
	 *         alerter, or null if no action should be presented for this getUserActions event.
	 */
	public prisms.arch.event.PrismsEvent getEventToFire(prisms.arch.event.PrismsEvent evt)
	{
		String plugin = (String) evt.getProperty("plugin");
		if(!prisms.util.ArrayUtils.contains(thePlugins, plugin))
			return null;
		prisms.arch.event.PrismsEvent ret = new prisms.arch.event.PrismsEvent(theEventName);
		if(theEventPropertiesIn.length > 0)
		{
			for(int p = 0; p < theEventPropertiesIn.length; p++)
			{
				Object prop = evt.getProperty(theEventPropertiesIn[p]);
				if(theEventPropertyRequired[p] && prop == null)
					return null;
				if(theEventPropertyClasses[p] != null
					&& !theEventPropertyClasses[p].isInstance(prop))
					return null;
				ret.setProperty(theEventPropertiesOut[p], prop);
			}
		}
		return ret;
	}

	/**
	 * Called when the user chooses this alerter's action
	 * 
	 * @param toFire The PrismsEvent to be fired
	 * @param actionEvent The action event that was fired when the user chose the action
	 */
	public void actionPerformed(prisms.arch.event.PrismsEvent toFire,
		java.awt.event.ActionEvent actionEvent)
	{
		theSession.fireEvent(toFire);
	}
}
